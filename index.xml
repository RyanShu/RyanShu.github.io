<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Commcocoa</title>
    <link>https://ryanshu.github.io/index.xml</link>
    <description>Recent content on Commcocoa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Tue, 07 Feb 2017 15:44:03 +0800</lastBuildDate>
    <atom:link href="https://ryanshu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Markdown实践</title>
      <link>https://ryanshu.github.io/it_capability/markdown_usage/</link>
      <pubDate>Tue, 07 Feb 2017 15:44:03 +0800</pubDate>
      
      <guid>https://ryanshu.github.io/it_capability/markdown_usage/</guid>
      <description>&lt;p&gt;在网上写内容的同学会经常遇到需要&lt;strong&gt;逐行或者逐字&lt;/strong&gt;地去调整格式的状况，右手不停地在键盘与鼠标之间来回切换，毫无行云流水的畅快之感。&lt;/p&gt;

&lt;p&gt;现在使用&lt;strong&gt;Markdown&lt;/strong&gt;来书写，在敲击键盘的同时键入相关的格式设定并且生成简明的网页，让你的写作思路不停歇，让你的右手只用撸键盘.&lt;/p&gt;

&lt;p&gt;Markdown作为轻量级的标记语言，语法简明操作简单且目前已经大量的客户端支持解析Markdown编写的文件，比如Gmail、简书、&lt;a href=&#34;http://note.youdao.com/?keyfrom=dict2.index&#34;&gt;有道云笔记&lt;/a&gt;、&lt;a href=&#34;http://www.wiz.cn/&#34;&gt;为知笔记&lt;/a&gt;、各种静态网页生成器等。&lt;/p&gt;

&lt;p&gt;不仅如此,在Markdown基础语法基础上更多的客户端还扩展了使用，比如支持flowchart、数学公式、代码高亮等等.其中&lt;a href=&#34;https://maxiang.io/&#34;&gt;马克飞象&lt;/a&gt;、&lt;a href=&#34;https://www.zybuluo.com/mdeditor&#34;&gt;CMD Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Markdown基础语法参考如下内容：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;Markdown Syntax from BJohn Gruber&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/#list&#34;&gt;Markdown语法说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下文将展示常用的Markdown使用语法&lt;/p&gt;

&lt;h2 id=&#34;标题&#34;&gt;标题&lt;/h2&gt;

&lt;p&gt;在行首“#”+“空格”后书写标题,该行将自动转为标题, &amp;ldquo;#&amp;ldquo;数目对应相应的标题.&lt;/p&gt;

&lt;p&gt;书写：
&amp;gt; # 一级标题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;## 二级标题&lt;/p&gt;

&lt;p&gt;### 三级标题&lt;/p&gt;

&lt;p&gt;#### 四级标题&lt;/p&gt;

&lt;p&gt;##### 五级标题&lt;/p&gt;

&lt;p&gt;###### 六级标题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果:
&amp;gt; # 一级标题&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;

&lt;h3 id=&#34;三级标题&#34;&gt;三级标题&lt;/h3&gt;

&lt;h4 id=&#34;四级标题&#34;&gt;四级标题&lt;/h4&gt;

&lt;h5 id=&#34;五级标题&#34;&gt;五级标题&lt;/h5&gt;

&lt;h6 id=&#34;六级标题&#34;&gt;六级标题&lt;/h6&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;字体&#34;&gt;字体&lt;/h2&gt;

&lt;p&gt;在对应需要写该字体的特定文字上前后增加相应数量的&amp;rdquo;*&amp;rdquo;
书写：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*斜体*&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;加黑*&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;斜体加黑*&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果：
&amp;gt; &lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;加黑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;斜体加黑&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;段落&#34;&gt;段落&lt;/h2&gt;

&lt;h3 id=&#34;分割线&#34;&gt;分割线&lt;/h3&gt;

&lt;p&gt;空白行增加连续3个以上的“*”或者“-”然后回车即可&lt;/p&gt;

&lt;p&gt;书写：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;***
-&amp;ndash;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;

&lt;p&gt;段前增加“&amp;gt;”即可
效果：
&amp;gt; One apple one day, keep docotor away.&lt;/p&gt;

&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;

&lt;p&gt;按如下方式书写表格，注意表格中行之间不可以有回车.&lt;/p&gt;

&lt;p&gt;书写：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;列1 | 列2 | 列3&lt;/p&gt;

&lt;p&gt;-|-|-&lt;/p&gt;

&lt;p&gt;行1 | 内容 | 内容&lt;/p&gt;

&lt;p&gt;行2 | 内容 | 内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果：
列1 | 列2 | 列3
-|-|-
行1 | 内容 | 内容
行2 | 内容 | 内容&lt;/p&gt;

&lt;h2 id=&#34;有序序列&#34;&gt;有序序列&lt;/h2&gt;

&lt;p&gt;在各序列项之前，增加&amp;rdquo;阿拉伯数字&amp;rdquo;+&amp;ldquo;.&amp;rdquo;+&amp;ldquo;空格&amp;rdquo;会自动生成有序序列.&lt;/p&gt;

&lt;p&gt;书写:
&amp;gt; \1. Apple&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\2. Bananna&lt;/p&gt;

&lt;p&gt;\3. Orange&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果：
&amp;gt; 1. Apple
&amp;gt; 2. Bananna
&amp;gt; 3. Orange&lt;/p&gt;

&lt;h2 id=&#34;无序序列&#34;&gt;无序序列&lt;/h2&gt;

&lt;p&gt;在各序列项之前，增加“*/-/+”+&amp;ldquo;空格&amp;rdquo;,会自动生成武学序列.&lt;/p&gt;

&lt;p&gt;书写：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;- Apple&lt;/p&gt;

&lt;p&gt;- Bananna&lt;/p&gt;

&lt;p&gt;- Orange&lt;/p&gt;

&lt;p&gt;* Apple&lt;/p&gt;

&lt;p&gt;* Bananna&lt;/p&gt;

&lt;p&gt;* Orange&lt;/p&gt;

&lt;p&gt;+ Apple&lt;/p&gt;

&lt;p&gt;+ Bananna&lt;/p&gt;

&lt;p&gt;+ Orange&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果：
&amp;gt; - Apple
&amp;gt; - Bananna
&amp;gt; - Orange&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Bananna&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Orange&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apple&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bananna&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Orange&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;多级序列&#34;&gt;多级序列&lt;/h2&gt;

&lt;p&gt;在二级序列项之前要比二级序列项多输入2个“空格”,在三级序列项之前要比二级序列项多输入2个“空格”&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; - Apple
&amp;gt;   - Hongfushi
&amp;gt;     - Yantai Hongfushi
&amp;gt;     - Shanxi Hongfushi
&amp;gt;  - Gala
&amp;gt;     - Qixia Gala&lt;/p&gt;

&lt;h2 id=&#34;链接插入&#34;&gt;链接插入&lt;/h2&gt;

&lt;p&gt;使用“[”+文字+“]”+&amp;ldquo;(&amp;rdquo;+网址+“)”即可&lt;/p&gt;

&lt;p&gt;效果:
&amp;gt; Make the Web Fun Again&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Introducing &lt;a href=&#34;http://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a new idea for making website creation simple again. Hugo works flexibly with many formats, and is ideal for blogs, docs, portfolios and much more. Hugo’s speed fosters creativity—it makes building a website fun again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;图像插入&#34;&gt;图像插入&lt;/h2&gt;

&lt;p&gt;使用&amp;rdquo;!&amp;ldquo;+“[”+文字+“]”+&amp;ldquo;(&amp;rdquo;+网址+“)”即可
&amp;gt;&lt;img src=&#34;http://www.gohugo.io/img/hugo.png&#34; alt=&#34;Hugo Logo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;Markdown仅使得用户快速输入文字并且快速排版,但如果要发布则需要其他客户端支持&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Hugo/Github搭建Commcocoa网站</title>
      <link>https://ryanshu.github.io/it_capability/how_to_setup_Commcocoa_by_Hugo_Github/</link>
      <pubDate>Tue, 17 Jan 2017 16:34:17 +0800</pubDate>
      
      <guid>https://ryanshu.github.io/it_capability/how_to_setup_Commcocoa_by_Hugo_Github/</guid>
      <description>&lt;h2 id=&#34;事先准备&#34;&gt;事先准备&lt;/h2&gt;

&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gohugo.io/tutorials/installing-on-windows/&#34;&gt;在Windows上安装Hugo&lt;/a&gt;,直接在Github上下载hugo.exe，需注意修改&lt;strong&gt;环境变量&lt;/strong&gt;，安装完成后查询hugo help若反馈如下则表明安装成功.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ hugo help
	hugo is the main command, used to build your Hugo site.

	Hugo is a Fast and Flexible Static Site Generator
	built with love by spf13 and friends in Go.

	Complete documentation is available at http://gohugo.io/.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装git-非必要&#34;&gt;安装Git(非必要)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;在Windows上安装Git&lt;/a&gt;,若产生Git Bash则安装成功.&lt;/p&gt;

&lt;h3 id=&#34;安装notepad-非必要&#34;&gt;安装Notepad++(非必要)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;在Windows上安装Notepad++&lt;/a&gt;,用于编辑网页,VIM将在Linux环境下使用而NPP将在Windows下使用.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;
透过使用*Hugo new XXX.md*生成的markdown文件是&lt;strong&gt;ANSI&lt;/strong&gt;编码，需要转换为&lt;strong&gt;UTF-8&lt;/strong&gt;编码才能正确显示中文字符.&lt;/p&gt;

&lt;h2 id=&#34;新建网站&#34;&gt;新建网站&lt;/h2&gt;

&lt;p&gt;按照Hugo官网&lt;a href=&#34;http://www.gohugo.io/overview/quickstart/&#34;&gt;Quick Start&lt;/a&gt;的instruction下新建网站.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前往安装目录,新建Commcocoa:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	$ hugo new site commcocoa
	Congratulations! Your new Hugo site is created in E:\XX\Commcocoa                .

	Just a few more steps and you&#39;re ready to go:

	1. Download a theme into the same-named folder.
	   Choose a theme from https://themes.gohugo.io/, or
	   create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.
	2. Perhaps you want to add some content. You can add single files
	   with &amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;\&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;.
	3. Start the built-in live server via &amp;quot;hugo server&amp;quot;.

	Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查询Commcocoa下自动生成的文件内容：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	$ ls -al
	total 5
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 ./
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 ../
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 archetypes/
	-rw-r--r-- 1 Ryan Shu 197121 82 Jan 17 14:42 config.toml
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 content/
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 data/
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 layouts/
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 static/
	drwxr-xr-x 1 Ryan Shu 197121  0 Jan 17 14:42 themes/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下载主题，使用事先选定的主题&lt;a href=&#34;http://themes.gohugo.io/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt;
如果没有主题则会出现build error. 下载方式可使用Git,如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	$ cd themes
	git clone https://github.com/digitalcraftsman/hugo-icarus-theme
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下载的主题会在theme文件夹下,则将其examplesSite内容拷贝并覆盖到Commcocoa目录下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ cp -av ~/commcocoa/themes/hugo-icarus-theme/exampleSite/* ~/commcocoa/&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用Hugo build,需返回到commcocoa目录下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	$ hugo server -t hugo-icarus-theme -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果有其他主题，使用下面命令来切换不同的主题,比如切换到robust主题&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;build pass后会产生如下打印消息：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	$ hugo server -t hugo-icarus-theme -D
	Started building sites ...
	Built site for language en:
	0 draft content
	0 future content
	0 expired content
	6 regular pages created
	4 other pages created
	0 non-page files copied
	3 paginator pages created
	0 tags created
	1 categories created
	total in 65 ms
	Watching for changes in E:\Ryan_Shu\Commcocoa\commcocoa\{data,content,layouts,static,themes}
	Serving pages from memory
	Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
	Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用浏览器访问&lt;a href=&#34;http://localhost:1313/&#34;&gt;localhost:1313&lt;/a&gt;即可显示网站.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置开关&#34;&gt;配置开关&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用Tags来增加标签&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	tags = []
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用categories来增减目录&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	categories = []
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;widgits&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	recent_articles = false
    categories = true
    tags = true
    tag_cloud = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;Hugo&lt;/code&gt;命令生成public:
&lt;code&gt;
	Started building sites ...
	Built site for language en:
	0 draft content
	0 future content
	0 expired content
	6 regular pages created
	4 other pages created
	0 non-page files copied
	3 paginator pages created
	0 tags created
	1 categories created
	total in 78 ms
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;目前标题中不能够出现“+”,否则无法索引到，怀疑需要转义.&lt;/li&gt;
&lt;li&gt;使用Hugo new page.md 一定要注意编码格式,UTF-8否则容易出现中文字符无法显示.&lt;/li&gt;
&lt;li&gt;```的使用注意前后段落回车&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>https://ryanshu.github.io/3gppprotocols/go-is-for-lovers/</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>https://ryanshu.github.io/3gppprotocols/go-is-for-lovers/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;https://ryanshu.github.io/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;https://ryanshu.github.io/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize | lower  }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;https://ryanshu.github.io/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>